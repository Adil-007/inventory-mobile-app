import reportService from "@/services/salesreportService";
import { Ionicons } from '@expo/vector-icons';
import DateTimePicker from '@react-native-community/datetimepicker';
import * as FileSystem from "expo-file-system";
import * as Print from "expo-print";
import { useRouter } from 'expo-router';
import * as Sharing from "expo-sharing";
import React, { useState } from "react";
import {
  ActivityIndicator,
  Alert,
  FlatList,
  Modal,
  SafeAreaView,
  ScrollView,
  StyleSheet,
  Switch,
  Text,
  TextInput,
  TouchableOpacity,
  View
} from "react-native";

export default function SalesReportScreen() {
  const router = useRouter();
  const [filters, setFilters] = useState({
    from: "",
    to: "",
    customer: "",
    paid: false,
    credit: false,
    cash: false,
    bank: false,
    product: "",
  });

  const [tempDate, setTempDate] = useState({ from: "", to: "" });
  const [sales, setSales] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [exporting, setExporting] = useState(false);
  const [showDatePicker, setShowDatePicker] = useState<{ from: boolean; to: boolean }>({ from: false, to: false });


const fetchSales = async () => {
  setLoading(true);
  try {
    const { sales } = await reportService.getSalesReport(filters);
    setSales(sales);
  } catch {
    Alert.alert("Error", "Failed to fetch sales report");
  } finally {
    setLoading(false);
  }
};

  const exportPDF = async () => {
    if (sales.length === 0) {
      Alert.alert("No Data", "Please generate a report first");
      return;
    }

    setExporting(true);
    try {
      const html = `
        <html>
          <head>
            <style>
              body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; padding: 30px; }
              .header { text-align: center; margin-bottom: 30px; }
              h1 { color: #2c3e50; margin-bottom: 10px; }
              .filters { background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px; }
              .filters p { margin: 5px 0; color: #6c757d; }
              table { width: 100%; border-collapse: collapse; margin-top: 20px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); }
              th, td { border: 1px solid #dee2e6; padding: 12px; text-align: left; }
              th { background: #3498db; color: white; font-weight: 600; }
              tr:nth-child(even) { background: #f8f9fa; }
              .total-row { background: #e3f2fd !important; font-weight: bold; }
              .footer { margin-top: 30px; text-align: center; color: #6c757d; font-size: 12px; }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>Sales Detail Report</h1>
              <div class="filters">
                <p><strong>Period:</strong> ${filters.from || 'N/A'} to ${filters.to || 'N/A'}</p>
                <p><strong>Customer:</strong> ${filters.customer || 'All Customers'}</p>
                <p><strong>Product:</strong> ${filters.product || 'All Products'}</p>
              </div>
            </div>
            
            <table>
              <tr>
                <th>Date</th>
                <th>Customer</th>
                <th>Product</th>
                <th>Qty</th>
                <th>Unit Price</th>
                <th>Total</th>
                <th>Status</th>
                <th>Method</th>
              </tr>
              ${sales.map((s) => `
                <tr>
                  <td>${s.date}</td>
                  <td>${s.customerName}</td>
                  <td>${s.productName}</td>
                  <td>${s.quantity}</td>
                  <td>Birr ${parseFloat(s.unitPrice).toFixed(2)}</td>
                  <td>Birr ${parseFloat(s.total).toFixed(2)}</td>
                  <td><span style="color: ${s.paymentStatus === 'Paid' ? '#28a745' : '#dc3545'}">${s.paymentStatus}</span></td>
                  <td>${s.paymentChannel}</td>
                </tr>
              `).join("")}
              <tr class="total-row">
                <td colspan="5" style="text-align: right;">Grand Total:</td>
                <td>Birr ${sales.reduce((sum, item) => sum + parseFloat(item.total), 0).toFixed(2)}</td>
                <td colspan="2"></td>
              </tr>
            </table>
            
            <div class="footer">
              <p>Generated by <strong>Ease Stock</strong> on ${new Date().toLocaleDateString()} | Total Records: ${sales.length}</p>
            </div>
          </body>
        </html>
      `;

      const { uri } = await Print.printToFileAsync({ html });
      const pdfName = FileSystem.documentDirectory + `sales-report-${Date.now()}.pdf`;
      await FileSystem.moveAsync({ from: uri, to: pdfName });
      await Sharing.shareAsync(pdfName);
    } catch {
      Alert.alert("Error", "Failed to export PDF");
    } finally {
      setExporting(false);
    }
  };

  const toggleFilter = (filter: keyof typeof filters) => {
    if (typeof filters[filter] === 'boolean') {
      setFilters({ ...filters, [filter]: !filters[filter] });
    }
  };

  const formatDate = (date: Date) => {
    return date.toISOString().split('T')[0];
  };

  const handleDateSelection = (type: 'from' | 'to', date: Date | undefined) => {
    if (date) {
      const formattedDate = formatDate(date);
      setTempDate({ ...tempDate, [type]: formattedDate });
    }
  };

  const confirmDateSelection = (type: 'from' | 'to') => {
    if (tempDate[type]) {
      setFilters({ ...filters, [type]: tempDate[type] });
    }
    setShowDatePicker({ ...showDatePicker, [type]: false });
  };

  const cancelDateSelection = (type: 'from' | 'to') => {
    setTempDate({ ...tempDate, [type]: "" });
    setShowDatePicker({ ...showDatePicker, [type]: false });
  };

  const renderFilterSwitch = (label: string, filterKey: keyof typeof filters) => (
    <View style={styles.switchContainer}>
      <Text style={styles.switchLabel}>{label}</Text>
      <Switch
        value={filters[filterKey] as boolean}
        onValueChange={() => toggleFilter(filterKey)}
        trackColor={{ false: "#767577", true: "#81b0ff" }}
        thumbColor={filters[filterKey] ? "#3498db" : "#f4f3f4"}
      />
    </View>
  );

  const renderSalesItem = ({ item }: { item: any }) => (
    <View style={styles.salesItem}>
      <View style={styles.salesItemHeader}>
        <Text style={styles.dateText}>{item.date}</Text>
        <Text style={[
          styles.statusBadge,
          { backgroundColor: item.paymentStatus === 'Paid' ? '#d4edda' : '#f8d7da' }
        ]}>
          {item.paymentStatus}
        </Text>
      </View>
      <Text style={styles.customerText}>{item.customerName}</Text>
      <View style={styles.salesItemDetails}>
        <Text style={styles.productText}>{item.productName} Ã— {item.quantity}</Text>
        <Text style={styles.totalText}>${parseFloat(item.total).toFixed(2)}</Text>
      </View>
      <Text style={styles.channelText}>Paid via {item.paymentChannel}</Text>
    </View>
  );

  return (
    <SafeAreaView style={styles.safeArea}>
      <View style={styles.container}>
        {/* Header with Back Button */}
        <View style={styles.header}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={() => router.replace('/more')}
          >
            <Ionicons name="arrow-back" size={24} color="#2c3e50" />
          </TouchableOpacity>
          <Text style={styles.title}>Sales Detail Report</Text>
          <View style={styles.headerSpacer} />
        </View>

        <ScrollView style={styles.filtersContainer} showsVerticalScrollIndicator={false}>
          <View style={styles.inputGroup}>
            <Text style={styles.label}>Date Range</Text>
            <View style={styles.dateInputContainer}>
              <TouchableOpacity 
                style={styles.dateInput}
                onPress={() => {
                  setTempDate({ ...tempDate, from: filters.from });
                  setShowDatePicker({ ...showDatePicker, from: true });
                }}
              >
                <Text style={filters.from ? styles.dateText : styles.placeholderText}>
                  {filters.from || 'From Date'}
                </Text>
                <Ionicons name="calendar" size={20} color="#666" />
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={styles.dateInput}
                onPress={() => {
                  setTempDate({ ...tempDate, to: filters.to });
                  setShowDatePicker({ ...showDatePicker, to: true });
                }}
              >
                <Text style={filters.to ? styles.dateText : styles.placeholderText}>
                  {filters.to || 'To Date'}
                </Text>
                <Ionicons name="calendar" size={20} color="#666" />
              </TouchableOpacity>
            </View>
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.label}>Customer Name</Text>
            <TextInput
              placeholder="Search customer..."
              value={filters.customer}
              onChangeText={(val) => setFilters({ ...filters, customer: val })}
              style={styles.input}
              placeholderTextColor="#999"
            />
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.label}>Product</Text>
            <TextInput
              placeholder="Search product..."
              value={filters.product}
              onChangeText={(val) => setFilters({ ...filters, product: val })}
              style={styles.input}
              placeholderTextColor="#999"
            />
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.label}>Payment Status</Text>
            <View style={styles.switchGroup}>
              {renderFilterSwitch("Paid", "paid")}
              {renderFilterSwitch("Credit", "credit")}
            </View>
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.label}>Payment Channel</Text>
            <View style={styles.switchGroup}>
              {renderFilterSwitch("Cash", "cash")}
              {renderFilterSwitch("Bank", "bank")}
            </View>
          </View>
        </ScrollView>

        <View style={styles.buttonContainer}>
          <TouchableOpacity 
            style={[styles.button, styles.generateButton, loading && styles.disabledButton]}
            onPress={fetchSales}
            disabled={loading}
          >
            {loading ? (
              <ActivityIndicator color="#fff" />
            ) : (
              <>
                <Ionicons name="refresh" size={20} color="#fff" />
                <Text style={styles.buttonText}>Generate Report</Text>
              </>
            )}
          </TouchableOpacity>

          <TouchableOpacity 
            style={[styles.button, styles.exportButton, (exporting || sales.length === 0) && styles.disabledButton]}
            onPress={exportPDF}
            disabled={exporting || sales.length === 0}
          >
            {exporting ? (
              <ActivityIndicator color="#fff" />
            ) : (
              <>
                <Ionicons name="download" size={20} color="#fff" />
                <Text style={styles.buttonText}>Export PDF</Text>
              </>
            )}
          </TouchableOpacity>
        </View>

        {sales.length > 0 && (
          <View style={styles.resultsContainer}>
            <Text style={styles.resultsTitle}>
              Results ({sales.length} records)
            </Text>
            <FlatList
              data={sales}
              keyExtractor={(item, idx) => idx.toString()}
              renderItem={renderSalesItem}
              style={styles.list}
              showsVerticalScrollIndicator={false}
            />
          </View>
        )}

        {/* Modal Date Pickers */}
        <Modal transparent visible={showDatePicker.from} animationType="fade">
          <View style={styles.modalOverlay}>
            <View style={styles.modalContent}>
              <Text style={styles.modalTitle}>Select From Date</Text>
              <DateTimePicker
                value={tempDate.from ? new Date(tempDate.from) : new Date()}
                mode="date"
                display="spinner"
                onChange={(event, date) => handleDateSelection('from', date)}
              />
              <View style={styles.modalButtons}>
                <TouchableOpacity
                  style={[styles.modalBtn, styles.cancelBtn]}
                  onPress={() => cancelDateSelection('from')}
                >
                  <Text style={styles.cancelBtnText}>Cancel</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={[styles.modalBtn, styles.confirmBtn]}
                  onPress={() => confirmDateSelection('from')}
                >
                  <Text style={styles.confirmBtnText}>Confirm</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </Modal>

        <Modal transparent visible={showDatePicker.to} animationType="fade">
          <View style={styles.modalOverlay}>
            <View style={styles.modalContent}>
              <Text style={styles.modalTitle}>Select To Date</Text>
              <DateTimePicker
                value={tempDate.to ? new Date(tempDate.to) : new Date()}
                mode="date"
                display="spinner"
                onChange={(event, date) => handleDateSelection('to', date)}
              />
              <View style={styles.modalButtons}>
                <TouchableOpacity
                  style={[styles.modalBtn, styles.cancelBtn]}
                  onPress={() => cancelDateSelection('to')}
                >
                  <Text style={styles.cancelBtnText}>Cancel</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={[styles.modalBtn, styles.confirmBtn]}
                  onPress={() => confirmDateSelection('to')}
                >
                  <Text style={styles.confirmBtnText}>Confirm</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </Modal>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  container: { 
    flex: 1, 
    backgroundColor: '#f8f9fa', 
    padding: 20,
    paddingTop: 10,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 20,
    paddingTop: 10,
  },
  backButton: {
    padding: 8,
    borderRadius: 20,
    backgroundColor: '#fff',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  headerSpacer: {
    width: 40, // Same as back button for balance
  },
  title: { 
    fontSize: 24, 
    fontWeight: 'bold', 
    color: '#2c3e50', 
    textAlign: 'center',
    flex: 1,
  },
  filtersContainer: { 
    backgroundColor: '#fff', 
    borderRadius: 15, 
    padding: 20, 
    marginBottom: 20, 
    elevation: 3,
    maxHeight: '50%',
  },
  inputGroup: { 
    marginBottom: 20 
  },
  label: { 
    fontSize: 16, 
    fontWeight: '600', 
    color: '#2c3e50', 
    marginBottom: 8 
  },
  input: { 
    borderWidth: 1, 
    borderColor: '#ddd', 
    borderRadius: 10, 
    padding: 15, 
    fontSize: 16, 
    backgroundColor: '#fafafa' 
  },
  dateInputContainer: { 
    flexDirection: 'row', 
    justifyContent: 'space-between', 
    gap: 10 
  },
  dateInput: { 
    flex: 1, 
    flexDirection: 'row', 
    alignItems: 'center', 
    justifyContent: 'space-between', 
    borderWidth: 1, 
    borderColor: '#ddd', 
    borderRadius: 10, 
    padding: 15, 
    backgroundColor: '#fafafa' 
  },
  placeholderText: { 
    color: '#999' 
  },
  dateText: { 
    color: '#333' 
  },
  switchGroup: { 
    flexDirection: 'row', 
    justifyContent: 'space-between' 
  },
  switchContainer: { 
    flexDirection: 'row', 
    alignItems: 'center', 
    justifyContent: 'space-between', 
    flex: 1, 
    marginRight: 15 
  },
  switchLabel: { 
    fontSize: 14, 
    color: '#555' 
  },
  buttonContainer: { 
    flexDirection: 'row', 
    gap: 15, 
    marginBottom: 20 
  },
  button: { 
    flex: 1, 
    flexDirection: 'row', 
    alignItems: 'center', 
    justifyContent: 'center', 
    gap: 8, 
    padding: 15, 
    borderRadius: 10, 
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 3,
  },
  generateButton: { 
    backgroundColor: '#3498db' 
  },
  exportButton: { 
    backgroundColor: '#27ae60' 
  },
  disabledButton: {
    backgroundColor: '#cccccc',
    opacity: 0.7,
  },
  buttonText: { 
    color: '#fff', 
    fontWeight: '600', 
    fontSize: 16 
  },
  resultsContainer: { 
    flex: 1, 
    backgroundColor: '#fff', 
    borderRadius: 15, 
    padding: 20, 
    elevation: 3 
  },
  resultsTitle: { 
    fontSize: 18, 
    fontWeight: '600', 
    color: '#2c3e50', 
    marginBottom: 15 
  },
  list: { 
    flex: 1 
  },
  salesItem: { 
    backgroundColor: '#f8f9fa', 
    padding: 15, 
    borderRadius: 10, 
    marginBottom: 10, 
    borderLeftWidth: 4, 
    borderLeftColor: '#3498db',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 1,
  },
  salesItemHeader: { 
    flexDirection: 'row', 
    justifyContent: 'space-between', 
    alignItems: 'center', 
    marginBottom: 5 
  },
  statusBadge: { 
    paddingHorizontal: 10, 
    paddingVertical: 4, 
    borderRadius: 12, 
    fontSize: 12, 
    fontWeight: '600', 
    color: '#155724' 
  },
  customerText: { 
    fontSize: 16, 
    fontWeight: '600', 
    color: '#2c3e50', 
    marginBottom: 5 
  },
  salesItemDetails: { 
    flexDirection: 'row', 
    justifyContent: 'space-between', 
    alignItems: 'center', 
    marginBottom: 5 
  },
  productText: { 
    color: '#666', 
    fontSize: 14 
  },
  totalText: { 
    fontSize: 16, 
    fontWeight: 'bold', 
    color: '#27ae60' 
  },
  channelText: { 
    fontSize: 12, 
    color: '#888', 
    fontStyle: 'italic' 
  },
  modalOverlay: { 
    flex: 1, 
    justifyContent: 'center', 
    alignItems: 'center', 
    backgroundColor: 'rgba(0,0,0,0.5)' 
  },
  modalContent: { 
    backgroundColor: '#fff', 
    borderRadius: 15, 
    padding: 20, 
    width: '90%', 
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 5,
    elevation: 10,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 15,
    color: '#2c3e50',
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 15,
    width: '100%',
  },
  modalBtn: {
    flex: 1,
    marginHorizontal: 5,
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
  },
  cancelBtn: {
    backgroundColor: '#f1f1f1',
  },
  confirmBtn: {
    backgroundColor: '#3498db',
  },
  cancelBtnText: {
    color: '#666',
    fontWeight: '600',
  },
  confirmBtnText: {
    color: '#fff',
    fontWeight: '600',
  },
});